C000                              ORG     $C000
                      
0076                  controlreg  EQU     $0076       ;zero page copy of control register 1
0077                  mempage     EQU     $0077       ;zero page copy of control register 2 (memory paging)
00E6                  MDREG       EQU     $00E6       ;zero page copy of MD register
FF24                  memreg1     EQU     $FF24       ;control register 1
FF25                  memreg2     EQU     $FF25       ;control register 2
FF00                  pia0base    EQU     $FF00       ;PIA registers
FF04                  pia1base    EQU     $FF04
FF08                  pia2base    EQU     $FF08
FF0C                  aciabase    EQU     $FF0C       ;ACIA registers
0100                  intpolltab  EQU     $0100       ;table of mapped registers to poll on interrupt 38 bytes max
                                                      ;terminates with a $0000 word
0000                  piadataa    EQU     0           ;offset to pia data A register
0001                  piacontrola EQU     1           ;offset to pia control A register
0002                  piadatab    EQU     2           ;offset to pia data B register
0003                  piacontrolb EQU     3           ;offset to pia control B register
0004                  piasetdata  EQU     %00000100   ;or mask to set data register
00FB                  piasetdir   EQU     %11111011   ;and mask to set direction register
                      
0149                  keybdshift  EQU     $0149       ;keyboard shift status 0x00 = off 0xff = on
0150                  keybdbase   EQU     $0150       ;keyboard scan table
0158                  keybdscan   EQU     $0158       ;keyboard rollover table
02DD                  keybuffer   EQU     $02dd       ;255 character keyboard buffer
                                                      ;0-1 = buffer head
                                                      ;2-3 = buffer tail
                                                      ;4-255 = data
                      *keyboard matrix conversion without shift and with shift
C000  4061626364656667 keymatrix   FCB     $40, $61, $62, $63, $64, $65, $66, $67
C008  68696A6B6C6D6E6F             FCB     $68, $69, $6A, $6B, $6C, $6D, $6E, $6F
C010  7071727374757677             FCB     $70, $71, $72, $73, $74, $75, $76, $77
C018  78797A0A5E080920             FCB     $78, $79, $7A, $0A, $5E, $08, $09, $20
C020  3031323334353637             FCB     $30, $31, $32, $33, $34, $35, $36, $37
C028  38393A3B2C2D2E2F             FCB     $38, $39, $3A, $3B, $2C, $2D, $2E, $2F
C030  0D0C030000000000             FCB     $0D, $0C, $03, $00, $00, $00, $00, $00
                      
C038  1341424344454647 keymatrix2  FCB     $13, $41, $42, $43, $44, $45, $46, $47
C040  48494A4B4C4D4E4F             FCB     $48, $49, $4A, $4B, $4C, $4D, $4E, $4F
C048  5051525354555657             FCB     $50, $51, $52, $53, $54, $55, $56, $57
C050  58595A7B5B155D20             FCB     $58, $59, $5A, $7B, $5B, $15, $5D, $20
C058  3021222324252627             FCB     $30, $21, $22, $23, $24, $25, $26, $27
C060  28292A2B3C3D3E3F             FCB     $28, $29, $2A, $2B, $3C, $3D, $3E, $3F
C068  0D5C030000000000             FCB     $0D, $5C, $03, $00, $00, $00, $00, $00
                      
                      * Verify operation of cpu
C070  10CE7FFF        rst_entry   LDS     #$7FFF      ;initialise system stack
C074  CE77FF                      LDU     #$77FF      ;initialise user stack
C077  8600                        LDA     #$00
C079  1F8B                        TFR     A,DP        ;set DP to 0
C07B  B70076                      STA     controlreg  ;initialise control register copy with 0
C07E  B7FF24                      STA     memreg1     ;set control register to 0
C081  B70077                      STA     mempage     ;set memory page copy to 0
C084  B7FF25                      STA     memreg2     ;set memory page to 0
C087  B70100                      STA     intpolltab  ;empty interrupt poll table
C08A  B70101                      STA     intpolltab+1
C08D  B700E6                      STA     MDREG       ;initialise copy of ME register
C090  8601                        LDA     #$01
C092  BDC24F                      JSR     SETPMD
C095  BDC22D                      JSR     unmaskint   ;enable interrupts
                                  
C098  C602            test        LDB     #$02
C09A  8655            teststart   LDA     #$55
C09C  8E6000                      LDX     #$6000
                      
C09F  A784            loop1       STA     $0000, X    ;fill $0000 to $5FFF
C0A1  301F                        LEAX    -1, X
C0A3  26FA                        BNE     loop1
C0A5  86AA                        LDA     #$AA
C0A7  8E6000                      LDX     #$6000
                      
C0AA  A784            loop2       STA     $0000, X    ;fill $0000 to $5FFF
C0AC  301F                        LEAX    -1, X
C0AE  26FA                        BNE     loop2
C0B0  F70076                      STB     controlreg
C0B3  C802                        EORB    #$02
C0B5  20E3                        BRA     teststart   ;repeat
                      
                      * set paged memory page
                      * A = page number
C0B7  B7FF25          setpage     STA     memreg2     ;set memory page
C0BA  B70077                      STA     mempage
C0BD  39                          RTS
                      
                      * init keyboard
                      * sets pia0 for keyboard scanning
                      * clears rollover table
C0BE  3412            initkbd     PSHS    A,X
C0C0  867F                        LDA     #$7f
C0C2  BEFF00                      LDX     pia0base
C0C5  BDC201                      JSR     setpiadir
C0C8  8600                        LDA     #$00
C0CA  BEFF02                      LDX     pia0base + 2
C0CD  BDC201                      JSR     setpiadir
C0D0  BE0150                      LDX     keybdbase
C0D3  A780            clrkbd      STA     ,X+
C0D5  BC0157                      CMPX    keybdbase + 7
C0D8  26F9                        BNE     clrkbd
C0DA  3592                        PULS    A,X,PC
                      
                      * scan keyboard
                      * store scan at rollover scan table
                      * assumes pia0 PIA0 A0-A6 and PIA B0-B7 are correctly configured
C0DC  3416            scankbd     PSHS    A,B,X
C0DE  C601                        LDB     #$01
C0E0  BE0150                      LDX     keybdbase
C0E3  F7FF00          scanloop    STB     pia0base + piadataa
C0E6  B6FF02                      LDA     pia0base + piadatab
C0E9  A780                        STA     ,X+
C0EB  58                          LSLB
C0EC  C180                        CMPB    #$80
C0EE  26F3                        BNE     scanloop
C0F0  3596                        PULS    A,B,X,PC
                      
C0F2  BDC0DC          updatekbd   JSR     scankbd
C0F5  3416                        PSHS    A,B,X
C0F7  BE0150                      LDX     keybdbase
C0FA  A607                        LDA     7,X
C0FC  8440                        ANDA    #$40
C0FE  2702                        BEQ     setshift
C100  86FF                        LDA     #$ff
C102  B70149          setshift    STA     keybdshift
C105  C600                        LDB     #$00
C107  A684            keyloop     LDA     ,X
C109  A808                        EORA    8,X
                      * convert new keys to characters in buffer
C10B  A684                        LDA     ,X
C10D  A708                        STA     8,X
C10F  3001                        LEAX    1,X
C111  5C                          INCB
C112  BC0158                      CMPX    keybdbase + 8
C115  26F0                        BNE     keyloop
C117  3596                        PULS    A,B,X,PC
                      
                      * convert bit position to integer (0-7)
                      * result in A
C119  3404            bitshift    PSHS    B
C11B  8600                        LDA     #$00
C11D  C101            shiftloop   CMPB    #$01
C11F  2704                        BEQ     bitshiftout
C121  54                          LSRB
C122  4C                          INCA
C123  20F8                        BRA     shiftloop
C125  3584            bitshiftout PULS    B,PC
                      
                      * translate keypress to character
                      * A = keys pressed on row
                      * B = column
C127  3414            kbdconv     PSHS    B,X
C129  3604                        PSHU    B
C12B  8EC000                      LDX     #keymatrix
C12E  7D0149                      TST     keybdshift
C131  270C                        BEQ     kbdconvinit
C133  8EC038                      LDX     #keymatrix2
C136  3602                        PSHU    A
C138  BDC119                      JSR     bitshift
C13B  3086                        LEAX    A,X
C13D  3702                        PULU    A
C13F  C601            kbdconvinit LDB     #$01
C141  3602            kbdconvloop PSHU    A
C143  1F98                        TFR     B,A
C145  A441                        ANDA    1,U
C147  2605                        BNE     nokey
C149  A684                        LDA     ,X
C14B  BDC15B                      JSR     addkey
C14E  58              nokey       LSLB
C14F  C180                        CMPB    #$80
C151  2704                        BEQ     endkeyconv
C153  3008                        LEAX    8,X
C155  20EA                        BRA     kbdconvloop
C157  3342            endkeyconv  LEAU    2,U
C159  3594                        PULS    B,X,PC
                      
                      * keyboard buffer handler
                      * A = character to store
                      * rejects input if buffer is full
C15B  3410            addkey      PSHS    X
C15D  BE02DD                      LDX     keybuffer
C160  BC02DF                      CMPX    keybuffer + 2
C163  270F                        BEQ     failaddkey
C165  3001                        LEAX    1,X
C167  8C03DD                      CMPX    #keybuffer + 256
C16A  2603                        BNE     storechar
C16C  8E02E1                      LDX     #keybuffer + 4
C16F  A784            storechar   STA     ,X
C171  BF02DD                      STX     keybuffer
C174  3590            failaddkey  PULS    X,PC
                      
                      * remove key from buffer
                      * A = character pulled
                      * A == 0 on no value found
C176  3410            pullkey     PSHS    X
C178  8600                        LDA     #$00
C17A  BE02DF                      LDX     keybuffer + 2
C17D  BC02DD                      CMPX    keybuffer
C180  270D                        BEQ     endpullkey
C182  A680                        LDA     ,X+
C184  8C03DD                      CMPX    #keybuffer + 256
C187  2603                        BNE     savetail
C189  8E02E1                      LDX     #keybuffer + 4
C18C  BF02DF          savetail    STX     keybuffer + 2
C18F  3590            endpullkey  PULS    X,PC
                      
                      * Control memory paging mode
                      * Depending on register A
                      * A = 0 32K ram, 32K rom
                      * A <> 0 32K ram, 16K page, 16k shadow rom
                      
                      * Assumes direct page location control reg 
                      * contains a copy of memreg1 and direct page
                      * location mempage contains a copy of memreg2
                      
                      * Assumes extended memory is available
C191  8100            pagemode    CMPA    #$00        ;enable/disable paging
C193  260C                        BNE     enablepage
C195  86FE            disablepage LDA     #$FE
C197  B40076                      ANDA    controlreg
C19A  B70076                      STA     controlreg
C19D  B7FF24                      STA     memreg1     ;disable
C1A0  39                          RTS
C1A1  3402            enablepage  PSHS    A           ;enable
C1A3  8601                        LDA     #$01
C1A5  BA0076                      ORA     controlreg
C1A8  B70076                      STA     controlreg
C1AB  B7FF24                      STA     memreg1
C1AE  3582                        PULS    A,PC
                      
C1B0  3436            shadow      PSHS    A,B,X,Y     ;shadow rom into high mem
                      * disable interrupts
C1B2  BDC22A                      JSR     maskint
                      * copy interrupt vectors first as precaution
C1B5  8EFFF0                      LDX     #$FFF0
C1B8  108E4000                    LDY     #$4000
C1BC  10860010                    LDW     #$0010
C1C0  BDC225                      JSR     blockcopy
C1C3  8601                        LDA     #$01
C1C5  BDC191                      JSR     pagemode
C1C8  8E4000                      LDX     #$4000
C1CB  108EFFF0                    LDY     #$FFF0
C1CF  10860010                    LDW     #$0010
C1D3  BDC225                      JSR     blockcopy
C1D6  8600                        LDA     #$00
C1D8  BDC191                      JSR     pagemode
                      * copy rom from C000 to 4000
C1DB  8EC000                      LDX     #$C000
C1DE  108E4000                    LDY     #$4000
C1E2  10863F00                    LDW     #$3F00
C1E6  BDC225                      JSR     blockcopy
                      * enable page mode
C1E9  8601                        LDA     #$01
C1EB  BDC191                      JSR     pagemode
                      * copy rom from 4000 back to C000
C1EE  8E4000                      LDX     #$4000
C1F1  108EC000                    LDY     #$C000
C1F5  10863F00                    LDW     #$3F00
C1F9  BDC225                      JSR     blockcopy
                      * re-enable interrupts
C1FC  BDC22D                      JSR     unmaskint
C1FF  35B6                        PULS    A,B,X,Y,PC
                      
                      * set data direction on pia register
                      * retains condition of pia control
                      * A = data direction bits
                      * X = pia register base
C201  3404            setpiadir   PSHS    B
C203  E601                        LDB     piacontrola, X
C205  3404                        PSHS    B
C207  F400FB                      ANDB    piasetdir
C20A  E701                        STB     piacontrola, X
C20C  A784                        STA     piadataa, X
C20E  3504                        PULS    B
C210  E701                        STB     piacontrola, X
C212  3584                        PULS    B,PC
                      
                      * swap memory page
                      * A = page number
                      * tests if memory paging is enabled
                      * nb: this code must not be held
                      *     in paged memory to avoid
                      *     unexpected behaviour on return
C214  3404            pageswap    PSHS    B
C216  F60076                      LDB     controlreg
C219  C401                        ANDB    #$01
C21B  2706                        BEQ     swapret
C21D  B70077                      STA     mempage
C220  B7FF25                      STA     memreg2
C223  3584            swapret     PULS    B,PC
                      
                      * copy rom block from X to Y
                      * X = start address
                      * Y = destination address
                      * W = length
C225  113812          blockcopy   TFM     X+,Y+           ; 6309 specific implementation - will fail on a 6809
C228  3580                        PULS    PC
                      
                      * disable interrupts (ignores existing state)
C22A  1A50            maskint     ORCC    #%01010000
C22C  39                          RTS
                      
                      * enable interrupts (ignores prior state)
C22D  1CAF            unmaskint   ANDCC   #%10101111
C22F  39                          RTS
                      
                      * poll external interrupts
                      * check interrupt poll table
                      * each entry is 6 bytes:
                      *  byte 0/1 is the address to test
                      *  byte 2 is the test mask
                      *  byte 3 is control over positive or negative test
                      *  byte 4/5 is the jump address
                      * halts on first zero word entry at 0/1
                      * while flexible and extendable it is also slow
                      * rapid interrupts will becoming blocking
C230  10BE0100        pollint     LDY     intpolltab  ;point Y at start of table
C234  AEA1            pollloop    LDX     ,Y++        ;load first register address
C236  2601                        BNE     scanpoll    ;proceed if non-zero value found
C238  3B                          RTI                 ;release from poll without action
C239  A6A0            scanpoll    LDA     ,Y+         ;grab test mask
C23B  E6A0                        LDB     ,Y+         ;grab test type
C23D  2608                        BNE     pollpos     ;select positive of negative test
C23F  A484            pollneg     ANDA    ,X          ;mask address at X
C241  270A                        BEQ     vectorpoll  ;if 0 result use vector
C243  3122            pollnext    LEAY    2,Y         ;on negative result skip vector
C245  20ED                        BRA     pollloop    ;next entry
C247  A484            pollpos     ANDA    ,X          ;mask address at X
C249  2602                        BNE     vectorpoll  ;if non0 result use vector
C24B  20F6                        BRA     pollnext    ;next entry
C24D  6EA4            vectorpoll  JMP     ,Y          ;vector to identified handler
                      
                      * Change processor to Emulation Mode or Native Mode,
                      * depending on value in Register A
                      * A=0 Emulation Mode
                      * A<>0 Native Mode
                      *
                      * Assumes direct page location MDREG contains an
                      * accurate image of the MD register contents (The
                      * program must initialize MDREG to $00 at start-up).
                      *
                      * Since LDMD accepts only an immediate operand, we
                      * push the appropriate LDMD / RTS sequence onto the
                      * stack and call it as a subroutine.
                      * Works for 6309 only.
C24F  3417            SETPMD      PSHS    X,D,CC      ;Save registers
C251  1A50                        ORCC    #$50        ;Make operation indivisible
C253  F600E6                      LDB     MDREG       ;Get mode register image
C256  C4FE                        ANDB    #$FE        ; strip mode selection bit (Emulation)
C258  4D                          TSTA
C259  2702                        BEQ     SETMD2      ;Skip next part if want Emulation
C25B  CA01                        ORB     #$01        ;Set Native mode bit (INCB lacks clarity)
C25D  F700E6          SETMD2      STB     MDREG       ;B has right value - update register image
C260  8639                        LDA     #$39        ;RTS op-code
C262  1E98                        EXG     B,A         ;Now A = LDMD's immed. operand, B = RTS
C264  8E103D                      LDX     #$103D      ;X has LDMD's 2-byte op-code
C267  1E01                        EXG     D,X         ;Now D:X = 10 3D <value> 39
C269  3416                        PSHS    X,D         ;Put subroutine on stack
C26B  ADE4                        JSR     ,S          ;Call subroutine, setting mode
C26D  3264                        LEAS    4,S         ; throw away subroutine when done.
C26F  3597                        PULS    CC,D,X,PC   ; and return to caller.
                      
C271  3B              nmi_entry   RTI
C272  3B              swi_entry   RTI
C273  7EC230          irq_entry   JMP     pollint
C276  3B              firq_entry  RTI
C277  3B              swi2_entry  RTI
C278  3B              swi3_entry  RTI
C279  3B              div0_entry  RTI
                      
                      * Boot and interrupt vectors
FFF0                              ORG     $FFF0
FFF0  C279            div0        FDB     div0_entry  ;specific to 6309 native mode
FFF2  C278            swi3        FDB     swi3_entry
FFF4  C277            swi2        FDB     swi2_entry
FFF6  C276            firq        FDB     firq_entry
FFF8  C273            irq         FDB     irq_entry
FFFA  C272            swi         FDB     swi_entry
FFFC  C271            nmi         FDB     nmi_entry
FFFE  C070            reset       FDB     rst_entry
